///   Redis客户端与服务端之间的通信，采用的是称为 Redis序列化协议（RESP）的协议，该协议是为了Redis专门设计的。
/// 该协议的特点如下：
///     - Simple
///     - Fast to parse
///     - Human readable
///   RESP 是一种二进制协议，使用以标准 ASCII 编码的控制序列。例如，字符A使用二进制字节值 65 进行编码。
/// 类似地，字符 CR ( \r )、LF ( \n ) 和 SP ( ) 的二进制字节值分别为 13、10 和 32。
/// 并且 RESP 是类似于HTTP协议的 Request-Response协议。
///
/// 协议报文介绍:
///  - `\r\n`(CRLF) 是协议的终止符，它始终分割每个部分。
///  - 报文中的第一个字节用于标识类型，后续字节为数据类型的内容。
///  - 报文的数据类型分为简单类型、批量数据类型、聚合数据类型。
///     - 比如文本字符串、布尔、数值等均为简单类型
///     - 字符串可以是简单类型，也可以是批量数据类型。简单字符串从不包含回车符 ( \r ) 或换行符 ( \n ) 字符。
///       批量字符串可以包含任何二进制数据，也可以称为二进制或blob
///     - 聚合（例如数组和映射）可以具有不同数量的子元素和嵌套级别。
///
/// 下面是Redis支持的RESP数据类型:
///     类型名称            最低支持的版本             所属类型            首个字节标识
///
fn main(){
    
}
